<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit Constants</title>
    <description>The 25 Constants Engineering Blog 
</description>
    <link>https://25constants.com/blog/</link>
    <atom:link href="https://25constants.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Jan 2020 21:05:09 -0500</pubDate>
    <lastBuildDate>Sun, 12 Jan 2020 21:05:09 -0500</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>A Maven Starter for Serious Java Projects</title>
        <description>&lt;p&gt;At &lt;a href=&quot;https://25constants.com&quot;&gt;25 Constants&lt;/a&gt;, we’re constantly starting new Java projects all the time, and every time starts with the same process of putting together a bunch of POMs, fixing up the classpath (cause Jar hell is &lt;a href=&quot;https://dzone.com/articles/what-is-jar-hell&quot;&gt;real&lt;/a&gt;), making sure all the libraries play nice, configuring logging… ad infinitum… It can be pretty time consuming. So… we decided to create a “living” starter project that we’ll be using to bootstrap our Java projects going forward. That means we’ll be maintaining it, upgrading the libraries, adding new modules, keeping the cobwebs off it, etc… AAAAND… we’ve decided to make it available so that we can spare YOU all that pain. And sure yea there’s &lt;a href=&quot;https://start.spring.io/&quot;&gt;other ones&lt;/a&gt; &lt;a href=&quot;https://medium.com/@brunosimioni/spring-boot-boilerplate-35f9cefa2aad&quot;&gt;out there&lt;/a&gt;, but they’re usually either for a specific use case/framework integration, missing a lot of the extra common stuff that every project needs (logging?), or just plain &lt;a href=&quot;https://github.com/NothingButTheHoff/spring-maven-boilerplate&quot;&gt;outdated&lt;/a&gt;. What we wanted to do was not just have a barebones starter, but a serious starter with a bunch of the basics already in place along with examples of integrations with other common components like a database, caching, web etc… So… we loaded ours up with all the latest and greatest libraries/frameworks/modules/bells and whistles we could think of, and that we think might be included in most serious Java projects. Well… maybe not quite ALL of them just yet but it’s a work in progress. Here’s what we wanted to accomplish:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;As stated, we wanted a starter project we could use as a template we could easily copy/paste modules from to get new Java projects off the ground quickly using the latest set of libraries for logging, testing, infrastructure, etc… all working together along with the latest version of Java (which happens to be 13 at the time of this writing).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some simple use cases and code exercising the various frameworks/libraries that are included, which any developer could use to get moving quickly whether that be a new developer coming on board or a developer that we pulled in from another project to help out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A repository to house mini example projects of whatever new tech was used for the latest project, as well as a place to keep our libraries up to date and verify interoperability. This also gives us the perfect playground to experiment with new features and libraries that come out.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So here’s what we came up with… (drumroll…) project Amoeba: &lt;a href=&quot;https://github.com/25constants/amoeba&quot;&gt;https://github.com/25constants/amoeba&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dig in shall we?&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;So, the BOM (bill of materials) POM (bom pom… lol), or root POM if you will, contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; section, which we’ll use to manage all the versions of all the dependencies (among a few other things). It looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
    &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
    &amp;lt;java.version&amp;gt;13&amp;lt;/java.version&amp;gt;
    &amp;lt;maven.compiler.source&amp;gt;13&amp;lt;/maven.compiler.source&amp;gt;
    &amp;lt;maven.compiler.target&amp;gt;13&amp;lt;/maven.compiler.target&amp;gt;

    &amp;lt;spring-boot.version&amp;gt;2.2.2.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;testcontainers.version&amp;gt;1.8.3&amp;lt;/testcontainers.version&amp;gt;
    &amp;lt;swagger2.version&amp;gt;2.9.2&amp;lt;/swagger2.version&amp;gt;
    &amp;lt;logstash-logback.version&amp;gt;4.9&amp;lt;/logstash-logback.version&amp;gt;
    &amp;lt;jackson.version&amp;gt;2.10.1&amp;lt;/jackson.version&amp;gt;

...

&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far standard stuff. This is where you can change the version of Java that you’re using in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;maven.compiler.xxx&amp;gt;&lt;/code&gt; tags (1.8? Seriously? For a NEW project?? &lt;a href=&quot;https://dev.to/awwsmm/20-reasons-to-move-on-from-java-8-1dio&quot;&gt;Oof…&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As far as dependencies go, all the modules make heavy use of Spring Boot, so we import Spring Boot’s BOM in the dependencyManagement section (instead of going the parent POM route that almost all the other boilerplates and examples use):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;!-- BOM for spring boot dependencies --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
            &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

...

&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The dependencies contains a few libraries that we figure every project will need to pull in such as logging and test utilities. Speaking of logging… we decided to go with &lt;a href=&quot;https://logging.apache.org/log4j/2.x/performance.html&quot;&gt;log4j2,&lt;/a&gt; and included the log4j2 binding for slf4j since sl4j is used liberally throughout so many libraries. We included a log4j2.xml config file.&lt;/p&gt;

&lt;p&gt;Finally, let me explain how we decided to handle all the various properties and configuration files. We had 2 requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;KISS. Properties and configs get hairy real quick but since this is just a starter and any derived project will have its own requirements anyway, it wouldn’t be worth the time to come up with some whiz-bang one-size-fits-all solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We wanted to have all the configuration housed in the same place so we wouldn’t have to go around chasing config files in various resource directories.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So… all our config files can be found under the root /config directory, with each module having its own subdirectory, along with a special ‘filters’ directory that contains files used by the Maven resources plugin for filtering resources. The build works by doing the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;For each module, copy the files directly under /config to the target directory. For now there’s just a default log4j2 config file that every module gets.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For each module, copy the files from the subdirectory under /config with the same name.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process uses the filters under the /config/filters directory, which contains a filter for each Maven profile; the default profile being ‘dev.’ Step 2 allows any common configuration file to get overridden by a module-specific one.&lt;/p&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;p&gt;Alright so… in addition to a “standard” module which contains standard Hibernate-based database access and a “web” module for a simple API, we’re releasing with these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;: An “in-memory data structure store.” Caching anyone..?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt;: Thanks Facebook.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://graphql.org/learn/&quot;&gt;GraphQL&lt;/a&gt;: Thanks again Facebook. What next? An awesome JavaScript library for &lt;a href=&quot;https://reactjs.org/&quot;&gt;building user interfaces?&lt;/a&gt;?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.elastic.co/products/elastic-stack&quot;&gt;Elasticsearch&lt;/a&gt;: Cool search engine… NOT built by Facebook.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we’ve got more coming! Let us know if there’s any in particular you’d like to see.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;One of the cool things about Amoeba is that getting it up and running is super easy thanks to Docker. (You DO use &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; don’t you?) We’ve included a docker-compose.yml file to easily deploy all those different components the various modules rely on. Just fire them all up and you’re ready to build and deploy. Of course, you can go the old fashioned route and download/install everything yourself, it’ll just take a bit more setup time. Everything you need should be detailed in the &lt;a href=&quot;https://github.com/25constants/amoeba/blob/master/README.md&quot;&gt;README.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Here’s a list of some of the libraries we use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://projectlombok.org/&quot;&gt;Lombok&lt;/a&gt;: For reducing boilerplate. Apparently it’s making Java &lt;a href=&quot;https://bytes.grubhub.com/lombok-makes-java-cool-again-171102bdcc52&quot;&gt;cool again.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Log4j2&lt;/a&gt;: Our choice for logging as mentioned above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;: Cause… duh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/DiUS/java-faker&quot;&gt;Faker&lt;/a&gt;: Java port of a pretty cool Ruby library to generate fake data that looks real. Even has Chuck Norris Facts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.testcontainers.org/&quot;&gt;Testcontainers&lt;/a&gt;: For Docker containers for testing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;Junit Jupiter&lt;/a&gt;: Cause it sounds cooler than saying Junit 5.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://swagger.io/tools/open-source/getting-started/&quot;&gt;Swagger&lt;/a&gt;: For the REST API stuff.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-link&quot;&gt;Github Link&lt;/h2&gt;

&lt;p&gt;And finally… here’s the link again for those that just scrolled all the way to the bottom for this: &lt;a href=&quot;https://github.com/25constants/amoeba&quot;&gt;https://github.com/25constants/amoeba&lt;/a&gt;. You know who you are.&lt;/p&gt;

&lt;p&gt;ENJOY! And hit us up with any comments/questions/suggestions.&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jan 2020 00:00:00 -0500</pubDate>
        <link>https://25constants.com/blog/starter/</link>
        <guid isPermaLink="true">https://25constants.com/blog/starter/</guid>
        
        
        <category>maven</category>
        
        <category>java</category>
        
      </item>
    
  </channel>
</rss>
